# name: test/sql/xml_enhanced_to_xml.test
# description: Test enhanced to_xml() function with complex type support
# group: [xml]

require xml

# Test 1: Basic scalar conversion
query I
SELECT to_xml('Hello World') AS scalar_conversion;
----
<?xml version="1.0"?>
<xml>Hello World</xml>

# Test 2: Scalar conversion with custom node name
query I
SELECT to_xml('Hello World', 'greeting') AS custom_node_name;
----
<?xml version="1.0"?>
<greeting>Hello World</greeting>

# Test 3: Integer conversion
query I
SELECT to_xml(42) AS integer_conversion;
----
<?xml version="1.0"?>
<xml>42</xml>

# Test 4: Decimal conversion
query I
SELECT to_xml(123.45) AS decimal_conversion;
----
<?xml version="1.0"?>
<xml>123.45</xml>

# Test 5: Boolean conversion
query I
SELECT to_xml(true) AS boolean_conversion;
----
<?xml version="1.0"?>
<xml>true</xml>

# Test 6: NULL value conversion
query I
SELECT to_xml(NULL) AS null_conversion;
----
<?xml version="1.0"?>
<xml></xml>

# Test 7: List conversion (simple array)
query I
SELECT to_xml(['apple', 'banana', 'cherry']) AS list_conversion;
----
<?xml version="1.0"?>
<root><xml>apple</xml><xml>banana</xml><xml>cherry</xml></root>

# Test 8: Struct conversion
query I
SELECT to_xml({'name': 'John', 'age': 30, 'city': 'NYC'}) AS struct_conversion;
----
<?xml version="1.0"?>
<root><age>30</age><city>NYC</city><name>John</name></root>

# Test 9: Nested struct conversion
query I
SELECT to_xml({'person': {'name': 'Alice', 'details': {'age': 25, 'country': 'USA'}}}) AS nested_struct;
----
<?xml version="1.0"?>
<root><person><details><age>25</age><country>USA</country></details><name>Alice</name></person></root>

# Test 10: Complex list of structs
query I
SELECT to_xml([{'id': 1, 'name': 'Item1'}, {'id': 2, 'name': 'Item2'}]) AS list_of_structs;
----
<?xml version="1.0"?>
<root><xml><id>1</id><name>Item1</name></xml><xml><id>2</id><name>Item2</name></xml></root>

# Test 11: Custom node name with struct
query I
SELECT to_xml({'title': 'Book Title', 'author': 'John Doe'}, 'book') AS custom_struct;
----
<?xml version="1.0"?>
<book><author>John Doe</author><title>Book Title</title></book>

# Test 12: Custom node name with list
query I
SELECT to_xml(['red', 'green', 'blue'], 'colors') AS custom_list;
----
<?xml version="1.0"?>
<colors><colors>red</colors><colors>green</colors><colors>blue</colors></colors>

# Test 13: Empty struct conversion
query I
SELECT to_xml({}) AS empty_struct;
----
<?xml version="1.0"?>
<root></root>

# Test 14: Empty list conversion
query I
SELECT to_xml([]) AS empty_list;
----
<?xml version="1.0"?>
<root></root>

# Test 15: String with special characters
query I
SELECT to_xml('Text with <brackets> & "quotes"') AS special_chars;
----
<?xml version="1.0"?>
<xml>Text with &lt;brackets&gt; &amp; "quotes"</xml>